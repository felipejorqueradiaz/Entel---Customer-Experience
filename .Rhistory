data0_bal <- data0[sample(nrow(data0), nrow(data1)), ]
data_bal <- rbind(data0_bal, data1)
set.seed(123)
sample = sample.split(data_bal$BIN_CHURN,SplitRatio = 0.75)
train1 =subset(data_bal,sample ==TRUE)
test1=subset(data_bal, sample==FALSE)
model_logit <- glm(BIN_CHURN ~ r_tec + r_com + tiempo + SEGMENTO,
data = train1,
family = binomial)
summary(model_logit)
predict <- predict(model_logit, test1, type = 'response')
table_mat <- table(test1$BIN_CHURN, predict > 0.5)
table_mat
knitr::opts_chunk$set(echo = TRUE)
library(data.table)
library(dplyr)
library(Hmisc)
library(ggplot2)
library(tidyr)
library(lubridate)
library(scales)
library(fastDummies)
rm(list=ls())
setwd("~/GitHub/2021-1/Entel---Customer-Experience")
data <- fread("fijo_consolidado.txt")
data <- data %>%
select(encriptado, MES, MONTO, CHURN, RECLAMO_COM, RECLAMO_TEC,
SEGMENTO, DESC_MOVIMIENTO_ACCF, TIPO_TRABAJO) %>%
mutate(DESC_MOVIMIENTO_ACCF = recode(DESC_MOVIMIENTO_ACCF,
'Churn Voluntario' = 'Voluntario',
'Recuperados de Cobranza' = 'De Cobranza',
'Churn Involuntario ( Inhabilitados y Desactivados por Cobranza )' = 'Involuntario'))
data$DESC_MOVIMIENTO_ACCF[is.na(data$DESC_MOVIMIENTO_ACCF)] <- "No churn"
data <- data %>%
arrange(encriptado, MES) %>%
group_by(encriptado) %>%
mutate(COM_sum = cumsum(RECLAMO_COM),
TEC_sum = cumsum(RECLAMO_TEC),
Monto = mean(MONTO))
View(data)
rm(list=ls())
setwd("~/GitHub/2021-1/Entel---Customer-Experience")
data <- fread("fijo_consolidado.txt")
data <- data %>%
select(encriptado, MES, MONTO, CHURN, RECLAMO_COM, RECLAMO_TEC,
SEGMENTO, DESC_MOVIMIENTO_ACCF, TIPO_TRABAJO) %>%
mutate(DESC_MOVIMIENTO_ACCF = recode(DESC_MOVIMIENTO_ACCF,
'Churn Voluntario' = 'Voluntario',
'Recuperados de Cobranza' = 'De Cobranza',
'Churn Involuntario ( Inhabilitados y Desactivados por Cobranza )' = 'Involuntario'))
data$DESC_MOVIMIENTO_ACCF[is.na(data$DESC_MOVIMIENTO_ACCF)] <- "No churn"
data <- data %>%
arrange(encriptado, MES) %>%
group_by(encriptado) %>%
mutate(COM_sum = cumsum(RECLAMO_COM),
TEC_sum = cumsum(RECLAMO_TEC),
Monto = mean(MONTO))
data2 <- data %>%
filter(DESC_MOVIMIENTO_ACCF == 'No churn' | DESC_MOVIMIENTO_ACCF == 'Voluntario') %>%
select(-c(TIPO_TRABAJO, DESC_MOVIMIENTO_ACCF))
data3 <- data2 %>%
group_by(encriptado, SEGMENTO) %>%
summarise(tiempo = n(),
churns = sum(CHURN),
r_com = sum(RECLAMO_COM),
r_tec = sum(RECLAMO_TEC),
monto = mean(MONTO))
data3$BIN_CHURN <- 0
data3$BIN_CHURN[data3$churns >0] <- 1
data3 <- data3[,2:ncol(data3)]
#data3 <- data2[,2:ncol(data2)]
data0 <- data3 %>% filter(BIN_CHURN == 0)
data1 <- data3 %>% filter(BIN_CHURN == 1)
data0_bal <- data0[sample(nrow(data0), nrow(data1)), ]
data_bal <- rbind(data0_bal, data1)
set.seed(123)
sample = sample.split(data_bal$BIN_CHURN,SplitRatio = 0.75)
train1 =subset(data_bal,sample ==TRUE)
test1=subset(data_bal, sample==FALSE)
model_logit <- glm(BIN_CHURN ~ r_tec + r_com + tiempo + SEGMENTO,
data = train1,
family = binomial)
summary(model_logit)
predict <- predict(model_logit, test1, type = 'response')
table_mat <- table(test1$BIN_CHURN, predict > 0.5)
table_mat
data3 <- data3[,2:ncol(data3)]
data0 <- data3 %>% filter(BIN_CHURN == 0)
data1 <- data3 %>% filter(BIN_CHURN == 1)
data0_bal <- data0[sample(nrow(data0), nrow(data1)), ]
data_bal <- rbind(data0_bal, data1)
set.seed(123)
sample = sample.split(data_bal$BIN_CHURN,SplitRatio = 0.75)
train1 =subset(data_bal,sample ==TRUE)
test1=subset(data_bal, sample==FALSE)
model_logit <- glm(BIN_CHURN ~ r_tec + r_com + tiempo + SEGMENTO,
data = train1,
family = binomial)
View(data2)
rm(list=ls())
setwd("~/GitHub/2021-1/Entel---Customer-Experience")
data <- fread("fijo_consolidado.txt")
data <- data %>%
select(encriptado, MES, MONTO, CHURN, RECLAMO_COM, RECLAMO_TEC,
SEGMENTO, DESC_MOVIMIENTO_ACCF, TIPO_TRABAJO) %>%
mutate(DESC_MOVIMIENTO_ACCF = recode(DESC_MOVIMIENTO_ACCF,
'Churn Voluntario' = 'Voluntario',
'Recuperados de Cobranza' = 'De Cobranza',
'Churn Involuntario ( Inhabilitados y Desactivados por Cobranza )' = 'Involuntario'))
data$DESC_MOVIMIENTO_ACCF[is.na(data$DESC_MOVIMIENTO_ACCF)] <- "No churn"
data <- data %>%
arrange(encriptado, MES) %>%
group_by(encriptado) %>%
mutate(COM_sum = cumsum(RECLAMO_COM),
TEC_sum = cumsum(RECLAMO_TEC),
Monto = mean(MONTO))
data2 <- data %>%
filter(DESC_MOVIMIENTO_ACCF == 'No churn' | DESC_MOVIMIENTO_ACCF == 'Voluntario') %>%
select(-c(TIPO_TRABAJO, DESC_MOVIMIENTO_ACCF))
data3 <- data2 %>%
group_by(encriptado, SEGMENTO) %>%
summarise(tiempo = n(),
churns = sum(CHURN),
r_com = sum(RECLAMO_COM),
r_tec = sum(RECLAMO_TEC),
monto = mean(MONTO))
data3$BIN_CHURN <- 0
data3$BIN_CHURN[data3$churns >0] <- 1
data3 <- data3[,2:ncol(data3)]
data0 <- data3 %>% filter(BIN_CHURN == 0)
data1 <- data3 %>% filter(BIN_CHURN == 1)
data0_bal <- data0[sample(nrow(data0), nrow(data1)), ]
data_bal <- rbind(data0_bal, data1)
set.seed(123)
sample = sample.split(data_bal$BIN_CHURN,SplitRatio = 0.75)
train1 =subset(data_bal,sample ==TRUE)
test1=subset(data_bal, sample==FALSE)
model_logit <- glm(BIN_CHURN ~ r_tec + r_com + tiempo + SEGMENTO,
data = train1,
family = binomial)
summary(model_logit)
predict <- predict(model_logit, test1, type = 'response')
table_mat <- table(test1$BIN_CHURN, predict > 0.5)
table_mat
data0 <- data2 %>% filter(CHURN == 0)
data1 <- data2 %>% filter(CHURN == 1)
data0_bal <- data0[sample(nrow(data0), nrow(data1)), ]
data_bal <- rbind(data0_bal, data1)
sample = sample.split(data_bal$CHURN,SplitRatio = 0.75)
set.seed(123)
sample = sample.split(data_bal$CHURN,SplitRatio = 0.75)
train1 =subset(data_bal,sample ==TRUE)
test1=subset(data_bal, sample==FALSE)
model_logit <- glm(CHURN ~ SEGMENTO,
data = train1,
family = binomial)
summary(model_logit)
predict <- predict(model_logit, test1, type = 'response')
table_mat <- table(test1$BIN_CHURN, predict > 0.5)
table_mat <- table(test1$CHURN, predict > 0.5)
table_mat
model_logit <- glm(CHURN ~ SEGMENTO + RECLAMO_COM + RECLAMO_TEC,
data = train1,
family = binomial)
summary(model_logit)
predict <- predict(model_logit, test1, type = 'response')
table_mat <- table(test1$CHURN, predict > 0.5)
table_mat
table_mat[1]
table_mat[2]
table_mat[3]
sum(table_mat)
data0 <- data2 %>% filter(CHURN == 0)
data1 <- data2 %>% filter(CHURN == 1)
data0_bal <- data0[sample(nrow(data0), nrow(data1)), ]
data_bal <- rbind(data0_bal, data1)
set.seed(123)
sample = sample.split(data_bal$CHURN,SplitRatio = 0.75)
train1 =subset(data_bal,sample ==TRUE)
test1=subset(data_bal, sample==FALSE)
model_logit <- glm(CHURN ~ SEGMENTO + RECLAMO_COM + RECLAMO_TEC,
data = train1,
family = binomial)
summary(model_logit)
predict <- predict(model_logit, test1, type = 'response')
table_mat <- table(test1$CHURN, predict > 0.5)
table_mat
print(paste('Accuracy:', (table_mat[1] + table_mat[4])/sum(table_mat)))
data0 <- data3 %>% filter(BIN_CHURN == 0)
data1 <- data3 %>% filter(BIN_CHURN == 1)
data0_bal <- data0[sample(nrow(data0), nrow(data1)), ]
data_bal <- rbind(data0_bal, data1)
set.seed(123)
sample = sample.split(data_bal$BIN_CHURN,SplitRatio = 0.75)
train1 =subset(data_bal,sample ==TRUE)
test1=subset(data_bal, sample==FALSE)
model_logit <- glm(BIN_CHURN ~ r_tec + r_com + tiempo + SEGMENTO,
data = train1,
family = binomial)
summary(model_logit)
predict <- predict(model_logit, test1, type = 'response')
table_mat <- table(test1$BIN_CHURN, predict > 0.5)
table_mat
print(paste('Accuracy:', (table_mat[1] + table_mat[4])/sum(table_mat)))
data0 <- data2 %>% filter(CHURN == 0)
data1 <- data2 %>% filter(CHURN == 1)
data0_bal <- data0[sample(nrow(data0), nrow(data1)), ]
data_bal <- rbind(data0_bal, data1)
set.seed(123)
sample = sample.split(data_bal$CHURN,SplitRatio = 0.75)
train1 =subset(data_bal,sample ==TRUE)
test1=subset(data_bal, sample==FALSE)
model_logit <- glm(CHURN ~ SEGMENTO + RECLAMO_COM + RECLAMO_TEC,
data = train1,
family = binomial)
summary(model_logit)
predict <- predict(model_logit, test1, type = 'response')
table_mat <- table(test1$CHURN, predict > 0.5)
table_mat
print(paste('Accuracy:', (table_mat[1] + table_mat[4])/sum(table_mat)))
model_logit <- glm(CHURN ~ SEGMENTO + RECLAMO_COM + RECLAMO_TEC + COM_sum,
data = train1,
family = binomial)
summary(model_logit)
predict <- predict(model_logit, test1, type = 'response')
table_mat <- table(test1$CHURN, predict > 0.5)
table_mat
print(paste('Accuracy:', (table_mat[1] + table_mat[4])/sum(table_mat)))
model_logit <- glm(CHURN ~ SEGMENTO + RECLAMO_COM + RECLAMO_TEC + COM_sum + TEC_sum,
data = train1,
family = binomial)
summary(model_logit)
predict <- predict(model_logit, test1, type = 'response')
table_mat <- table(test1$CHURN, predict > 0.5)
table_mat
print(paste('Accuracy:', (table_mat[1] + table_mat[4])/sum(table_mat)))
install.packages("randomForest")
library(randomForest)
rf <- randomForest(BIN_CHURN ~ BIN_CHURN ~ r_tec + r_com + tiempo + SEGMENTO,
data = data3 , subset = train1)
rf <- randomForest(BIN_CHURN ~ r_tec + r_com + tiempo + SEGMENTO,
data = data3 , subset = train1)
data0 <- data3 %>% filter(BIN_CHURN == 0)
data1 <- data3 %>% filter(BIN_CHURN == 1)
data0_bal <- data0[sample(nrow(data0), nrow(data1)), ]
data_bal <- rbind(data0_bal, data1)
set.seed(123)
sample = sample.split(data_bal$BIN_CHURN,SplitRatio = 0.75)
train1 =subset(data_bal,sample ==TRUE)
test1=subset(data_bal, sample==FALSE)
model_logit <- glm(BIN_CHURN ~ r_tec + r_com + tiempo + SEGMENTO,
data = train1,
family = binomial)
summary(model_logit)
predict <- predict(model_logit, test1, type = 'response')
table_mat <- table(test1$BIN_CHURN, predict > 0.5)
table_mat
print(paste('Accuracy:', (table_mat[1] + table_mat[4])/sum(table_mat)))
rf <- randomForest(BIN_CHURN ~ r_tec + r_com + tiempo + SEGMENTO,
data = data_bal , subset = train1)
data_bal.rf = randomForest(BIN_CHURN ~ r_tec + r_com + tiempo + SEGMENTO,
data = data_bal , subset = train1)
View(data_bal)
data_bal.rf = randomForest(BIN_CHURN ~ r_tec + r_com + tiempo + SEGMENTO,
data = data_bal , subset = train1)
data_bal.rf = randomForest(BIN_CHURN ~ r_tec + r_com + tiempo + SEGMENTO,
data = train1)
y
data_bal.rf = randomForest(BIN_CHURN ~ r_tec + r_com + tiempo + SEGMENTO,
data = train1)
y
data_bal.rf
install.packages("e1071")
library(e1071)
confusionMatrix(predict(train1, test1), test1$BIN_CHURN, positive='1')
data_bal.rf = randomForest(BIN_CHURN ~ r_tec + r_com + tiempo + SEGMENTO,
data = train1)
confusionMatrix(predict(rftrain, test1), test1$BIN_CHURN, positive='1')
library(caret)
rftrain <- randomForest(BIN_CHURN ~ r_tec + r_com + tiempo + SEGMENTO,
data = train1)
confusionMatrix(predict(rftrain, test1), test1$BIN_CHURN, positive='1')
View(test1)
rftrain <- randomForest(BIN_CHURN ~ .,
data = train1)
rftrain <- randomForest(BIN_CHURN ~ .,
data = train1)
y
confusionMatrix(predict(rftrain, test1), test1$BIN_CHURN, positive='1')
rftrain <- randomForest(BIN_CHURN ~ ., data = train1)
confusionMatrix(predict(rftrain, test1), test1$BIN_CHURN, positive='1')
rftrain <- randomForest(BIN_CHURN ~ ., data = train1)
data3$BIN_CHURN <- as.factor(data3$BIN_CHURN)
rm(list=ls())
setwd("~/GitHub/2021-1/Entel---Customer-Experience")
data <- fread("fijo_consolidado.txt")
data <- data %>%
select(encriptado, MES, MONTO, CHURN, RECLAMO_COM, RECLAMO_TEC,
SEGMENTO, DESC_MOVIMIENTO_ACCF, TIPO_TRABAJO) %>%
mutate(DESC_MOVIMIENTO_ACCF = recode(DESC_MOVIMIENTO_ACCF,
'Churn Voluntario' = 'Voluntario',
'Recuperados de Cobranza' = 'De Cobranza',
'Churn Involuntario ( Inhabilitados y Desactivados por Cobranza )' = 'Involuntario'))
data$DESC_MOVIMIENTO_ACCF[is.na(data$DESC_MOVIMIENTO_ACCF)] <- "No churn"
data <- data %>%
arrange(encriptado, MES) %>%
group_by(encriptado) %>%
mutate(COM_sum = cumsum(RECLAMO_COM),
TEC_sum = cumsum(RECLAMO_TEC),
Monto = mean(MONTO))
data2 <- data %>%
filter(DESC_MOVIMIENTO_ACCF == 'No churn' | DESC_MOVIMIENTO_ACCF == 'Voluntario') %>%
select(-c(TIPO_TRABAJO, DESC_MOVIMIENTO_ACCF))
data3 <- data2 %>%
group_by(encriptado, SEGMENTO) %>%
summarise(tiempo = n(),
churns = sum(CHURN),
r_com = sum(RECLAMO_COM),
r_tec = sum(RECLAMO_TEC),
monto = mean(MONTO))
data3$BIN_CHURN <- 0
data3$BIN_CHURN[data3$churns >0] <- 1
data3 <- data3[,2:ncol(data3)]
data3$BIN_CHURN <- as.factor(data3$BIN_CHURN)
rftrain <- randomForest(BIN_CHURN ~ ., data = train1)
data0 <- data3 %>% filter(BIN_CHURN == 0)
data1 <- data3 %>% filter(BIN_CHURN == 1)
data0_bal <- data0[sample(nrow(data0), nrow(data1)), ]
data_bal <- rbind(data0_bal, data1)
set.seed(123)
sample = sample.split(data_bal$BIN_CHURN,SplitRatio = 0.75)
train1 =subset(data_bal,sample ==TRUE)
test1=subset(data_bal, sample==FALSE)
model_logit <- glm(BIN_CHURN ~ r_tec + r_com + tiempo + SEGMENTO,
data = train1,
family = binomial)
summary(model_logit)
predict <- predict(model_logit, test1, type = 'response')
table_mat <- table(test1$BIN_CHURN, predict > 0.5)
table_mat
print(paste('Accuracy:', (table_mat[1] + table_mat[4])/sum(table_mat)))
rftrain <- randomForest(BIN_CHURN ~ ., data = train1)
confusionMatrix(predict(rftrain, test1), test1$BIN_CHURN, positive='1')
confusionMatrix(predict(rftrain, data0), data0$BIN_CHURN, positive='1')
View(rftrain)
data3 <- subset(data3, select = -c(churns, monto) )
View(data3)
rm(list=ls())
setwd("~/GitHub/2021-1/Entel---Customer-Experience")
data <- fread("fijo_consolidado.txt")
data <- data %>%
select(encriptado, MES, MONTO, CHURN, RECLAMO_COM, RECLAMO_TEC,
SEGMENTO, DESC_MOVIMIENTO_ACCF, TIPO_TRABAJO) %>%
mutate(DESC_MOVIMIENTO_ACCF = recode(DESC_MOVIMIENTO_ACCF,
'Churn Voluntario' = 'Voluntario',
'Recuperados de Cobranza' = 'De Cobranza',
'Churn Involuntario ( Inhabilitados y Desactivados por Cobranza )' = 'Involuntario'))
data$DESC_MOVIMIENTO_ACCF[is.na(data$DESC_MOVIMIENTO_ACCF)] <- "No churn"
data <- data %>%
arrange(encriptado, MES) %>%
group_by(encriptado) %>%
mutate(COM_sum = cumsum(RECLAMO_COM),
TEC_sum = cumsum(RECLAMO_TEC),
Monto = mean(MONTO))
data2 <- data %>%
filter(DESC_MOVIMIENTO_ACCF == 'No churn' | DESC_MOVIMIENTO_ACCF == 'Voluntario') %>%
select(-c(TIPO_TRABAJO, DESC_MOVIMIENTO_ACCF))
data3 <- data2 %>%
group_by(encriptado, SEGMENTO) %>%
summarise(tiempo = n(),
churns = sum(CHURN),
r_com = sum(RECLAMO_COM),
r_tec = sum(RECLAMO_TEC),
monto = mean(MONTO))
data3$BIN_CHURN <- 0
data3$BIN_CHURN[data3$churns >0] <- 1
data3 <- data3[,2:ncol(data3)]
data3$BIN_CHURN <- as.factor(data3$BIN_CHURN)
data3 <- subset(data3, select = -c(churns, monto) )
data0 <- data3 %>% filter(BIN_CHURN == 0)
data1 <- data3 %>% filter(BIN_CHURN == 1)
data0_bal <- data0[sample(nrow(data0), nrow(data1)), ]
data_bal <- rbind(data0_bal, data1)
set.seed(123)
sample = sample.split(data_bal$BIN_CHURN,SplitRatio = 0.75)
train1 =subset(data_bal,sample ==TRUE)
test1=subset(data_bal, sample==FALSE)
model_logit <- glm(BIN_CHURN ~ r_tec + r_com + tiempo + SEGMENTO,
data = train1,
family = binomial)
summary(model_logit)
predict <- predict(model_logit, test1, type = 'response')
table_mat <- table(test1$BIN_CHURN, predict > 0.5)
table_mat
print(paste('Accuracy:', (table_mat[1] + table_mat[4])/sum(table_mat)))
rftrain <- randomForest(BIN_CHURN ~ ., data = train1)
confusionMatrix(predict(rftrain, data0), data0$BIN_CHURN, positive='1')
confusionMatrix(predict(rftrain, test1), test1$BIN_CHURN, positive='1')
View(rftrain)
data0 <- data2 %>% filter(CHURN == 0)
data1 <- data2 %>% filter(CHURN == 1)
data0_bal <- data0[sample(nrow(data0), nrow(data1)), ]
data_bal <- rbind(data0_bal, data1)
set.seed(123)
sample = sample.split(data_bal$CHURN,SplitRatio = 0.75)
train1 =subset(data_bal,sample ==TRUE)
test1=subset(data_bal, sample==FALSE)
model_logit <- glm(CHURN ~ SEGMENTO + RECLAMO_COM + RECLAMO_TEC + COM_sum + TEC_sum,
data = train1,
family = binomial)
summary(model_logit)
predict <- predict(model_logit, test1, type = 'response')
table_mat <- table(test1$CHURN, predict > 0.5)
table_mat
print(paste('Accuracy:', (table_mat[1] + table_mat[4])/sum(table_mat)))
View(data_bal)
data0 <- data2 %>% filter(CHURN == 0) %>% select(-c(MONTO, encriptado, Monto))
data1 <- data2 %>% filter(CHURN == 1) %>% select(-c(MONTO, encriptado, Monto))
data0_bal <- data0[sample(nrow(data0), nrow(data1)), ]
data_bal <- rbind(data0_bal, data1)
set.seed(123)
sample = sample.split(data_bal$CHURN,SplitRatio = 0.75)
train1 =subset(data_bal,sample ==TRUE)
test1=subset(data_bal, sample==FALSE)
model_logit <- glm(CHURN ~ SEGMENTO + RECLAMO_COM + RECLAMO_TEC + COM_sum + TEC_sum,
data = train1,
family = binomial)
summary(model_logit)
predict <- predict(model_logit, test1, type = 'response')
table_mat <- table(test1$CHURN, predict > 0.5)
table_mat
print(paste('Accuracy:', (table_mat[1] + table_mat[4])/sum(table_mat)))
rftrain <- randomForest(CHURN ~ ., data = train1)
rm(list=ls())
setwd("~/GitHub/2021-1/Entel---Customer-Experience")
data <- fread("fijo_consolidado.txt")
data <- data %>%
select(encriptado, MES, MONTO, CHURN, RECLAMO_COM, RECLAMO_TEC,
SEGMENTO, DESC_MOVIMIENTO_ACCF, TIPO_TRABAJO) %>%
mutate(DESC_MOVIMIENTO_ACCF = recode(DESC_MOVIMIENTO_ACCF,
'Churn Voluntario' = 'Voluntario',
'Recuperados de Cobranza' = 'De Cobranza',
'Churn Involuntario ( Inhabilitados y Desactivados por Cobranza )' = 'Involuntario'))
data$DESC_MOVIMIENTO_ACCF[is.na(data$DESC_MOVIMIENTO_ACCF)] <- "No churn"
data <- data %>%
arrange(encriptado, MES) %>%
group_by(encriptado) %>%
mutate(COM_sum = cumsum(RECLAMO_COM),
TEC_sum = cumsum(RECLAMO_TEC),
Monto = mean(MONTO))
data2 <- data %>%
filter(DESC_MOVIMIENTO_ACCF == 'No churn' | DESC_MOVIMIENTO_ACCF == 'Voluntario') %>%
select(-c(TIPO_TRABAJO, DESC_MOVIMIENTO_ACCF))
data2$CHURN <- as.factor(data2$CHURN)
data3 <- data2 %>%
group_by(encriptado, SEGMENTO) %>%
summarise(tiempo = n(),
churns = sum(CHURN),
r_com = sum(RECLAMO_COM),
r_tec = sum(RECLAMO_TEC),
monto = mean(MONTO))
rm(list=ls())
setwd("~/GitHub/2021-1/Entel---Customer-Experience")
data <- fread("fijo_consolidado.txt")
data <- data %>%
select(encriptado, MES, MONTO, CHURN, RECLAMO_COM, RECLAMO_TEC,
SEGMENTO, DESC_MOVIMIENTO_ACCF, TIPO_TRABAJO) %>%
mutate(DESC_MOVIMIENTO_ACCF = recode(DESC_MOVIMIENTO_ACCF,
'Churn Voluntario' = 'Voluntario',
'Recuperados de Cobranza' = 'De Cobranza',
'Churn Involuntario ( Inhabilitados y Desactivados por Cobranza )' = 'Involuntario'))
data$DESC_MOVIMIENTO_ACCF[is.na(data$DESC_MOVIMIENTO_ACCF)] <- "No churn"
data <- data %>%
arrange(encriptado, MES) %>%
group_by(encriptado) %>%
mutate(COM_sum = cumsum(RECLAMO_COM),
TEC_sum = cumsum(RECLAMO_TEC),
Monto = mean(MONTO))
data2 <- data %>%
filter(DESC_MOVIMIENTO_ACCF == 'No churn' | DESC_MOVIMIENTO_ACCF == 'Voluntario') %>%
select(-c(TIPO_TRABAJO, DESC_MOVIMIENTO_ACCF))
data3 <- data2 %>%
group_by(encriptado, SEGMENTO) %>%
summarise(tiempo = n(),
churns = sum(CHURN),
r_com = sum(RECLAMO_COM),
r_tec = sum(RECLAMO_TEC),
monto = mean(MONTO))
data2$CHURN <- as.factor(data2$CHURN)
data3$BIN_CHURN <- 0
data3$BIN_CHURN[data3$churns >0] <- 1
data3 <- data3[,2:ncol(data3)]
data3$BIN_CHURN <- as.factor(data3$BIN_CHURN)
data3 <- subset(data3, select = -c(churns, monto) )
data0 <- data2 %>% filter(CHURN == 0) %>% select(-c(MONTO, encriptado, Monto))
data1 <- data2 %>% filter(CHURN == 1) %>% select(-c(MONTO, encriptado, Monto))
data0_bal <- data0[sample(nrow(data0), nrow(data1)), ]
data_bal <- rbind(data0_bal, data1)
set.seed(123)
sample = sample.split(data_bal$CHURN,SplitRatio = 0.75)
train1 =subset(data_bal,sample ==TRUE)
test1=subset(data_bal, sample==FALSE)
model_logit <- glm(CHURN ~ SEGMENTO + RECLAMO_COM + RECLAMO_TEC + COM_sum + TEC_sum,
data = train1,
family = binomial)
summary(model_logit)
predict <- predict(model_logit, test1, type = 'response')
table_mat <- table(test1$CHURN, predict > 0.5)
table_mat
print(paste('Accuracy:', (table_mat[1] + table_mat[4])/sum(table_mat)))
rftrain <- randomForest(CHURN ~ ., data = train1)
confusionMatrix(predict(rftrain, test1), test1$CHURN, positive='1')
