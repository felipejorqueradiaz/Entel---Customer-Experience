### EDA
Antes de entrenar un modelo predictivo, o incluso antes de realizar cualquier cálculo con un nuevo conjunto de datos, es muy importante realizar una exploración descriptiva de los mismos. Este proceso permite entender mejor que información contiene cada variable, así como detectar posibles errores.
#### Gráficos
#### Variable de interés
```{r histograma, message = FALSE, warning=FALSE}
ggplot(data=Casas)+ #Se define un gráfico con ggplot()
aes(x=Sale_Price)+ #Solo le ingresamos el eje "x" para un histograma
geom_histogram(col="black", fill="green", alpha = 0.2) # Se define la forma del gráfico. "col" pinta el contorno, "fill" el entorno y "alpha" entrega transparencia
```
```{r histograma 2, message = FALSE, warning=FALSE}
ggplot(data=Casas)+
aes(x=log(Sale_Price))+
geom_histogram(col="black", fill="green", alpha=0.2)+
xlab("Log(Precio de venta)")+ #Etiqueta para el eje x
ylab("Frecuencia")+ #Etiqueta para el eje y
ggtitle("Distribución log(Precio de venta)")+ #Título del gráfico
theme(plot.title = element_text(hjust = 0.5)) #centra el título en el gráfico. Lo ajusta en la posición horizontal (hjust = 0.5)
```
#### Variables explicativas
Escogemos algunas variables: `Year_Built` (Año en que se construyó la casa), `Roof_Style` (Tipo de techo), `Gr_Liv_Area` (espacio habitable total sobre el suelo de una casa) y `Heating_QC`(Calidad y estado de la calefacción)
```{r tranf var, message = FALSE, warning=FALSE}
#R no siempre interpreta bien la naturaleza de las variables: Roof_Style y Heating_QC son factores, pero están como character(string)
#en train
train$Roof_Style=as.factor(train$Roof_Style)
train$Heating_QC=as.factor(train$Heating_QC)
#en test
test$Roof_Style=as.factor(test$Roof_Style)
test$Heating_QC=as.factor(test$Heating_QC)
```
##### `Year_Built`
```{r Gráfico de dispersión, message = FALSE, warning=FALSE}
library(gridExtra) #Para unir gráficas
g1 <- ggplot(Casas) +
aes(x=Year_Built, y=Sale_Price) +
geom_point(size=1, alpha=0.4) + #"size" aumenta el tamaño de los puntos, "alpha" da transparencia
geom_smooth(se=FALSE) + #Agregamos un ajuste no lineal sobre los puntos. "se" integra errores estándares
xlab("Año de construcción")
g2 <- ggplot(Casas) +
aes(x=Year_Built, y=Sale_Price) +
geom_point(size = 1, alpha = .4) +
geom_smooth(method = "lm", se = FALSE) + #Agregamos un ajuste lineal sobre los puntos.
scale_y_log10() + # "scale_y_log10" transforma el eje "y" a logaritmo.
xlab("Año de construcción")
grid.arrange(g1, g2, nrow = 1) #une las  gráficas.
```
##### `Gr_Liv_Area` según `Heating_QC`
```{r, message = FALSE, warning=FALSE}
ggplot(Casas) +
aes(x=Gr_Liv_Area, y=Sale_Price, col=Heating_QC)+ #Se agrega una dimensión de colores "col".
geom_point(size=1, alpha=0.4) +
geom_smooth(se=FALSE, method="lm") +
xlab("Espacio habitable")
```
##### `Roof_Style`
```{r, message = FALSE, warning=FALSE}
ggplot(Casas) +
aes(x=Roof_Style, y=log(Sale_Price)) +
geom_boxplot(alpha=0.4, fill="black") #cambiamos el tipo de gráfico
```
## Regresión Lineal
```{r, message = FALSE, warning=FALSE}
train.lm <- train(form = Sale_Price ~ Year_Built+Gr_Liv_Area+Roof_Style+Heating_QC, #Fórmula
data = train, #Datos
method = "lm", #Algoritmo
trControl = trainControl(method = "cv", number = 10) #Method = cross validation, number=10 (k-fold)
)
test.lm  <- predict(train.lm , newdata=test) #Vector de datos predichos. Recibe una base de datos (newdata) y un modelo entrenado (train.lm)
error.lm <- test$Sale_Price-test.lm #Calcular los errores de predicción (dato real - dato estimado)
```
## MARS
Este algoritmo no asume una forma funcional de los datos, toma las variables $X$ y trata de "formar" funciones no lineales e interacciones que se ajusten a los datos. Las no linealidades e interacciones se van "ajustando" a una función escalonada o por tramos donde el objetivo es encontrar puntos de cortes o "knots" que se adecuan de mejor forma a los datos. Luego de haber de encontrado muchos "knots", el algoritmo realiza una "limpieza" donde se eliminan puntos que no contribuyen significativamente a la precisión predictiva (redundantes). Este proceso se le llama poda.
![](3.png)
```{r, message = FALSE, warning=FALSE}
#Ejecutar MARS (Multivariate adaptive regression spline)
train.mars <- train(form = Sale_Price ~ Year_Built+Gr_Liv_Area+Roof_Style+Heating_QC,
data=train,
method="earth", #MARS
trControl = trainControl("cv", number=10),
preProcess = c("center","scale"), #Pre-procesa datos. "center" resta el promedio de las variables, "scale" las divide por la desviación estandar. Esto ayuda para el tratamiento de outliers.
tuneLength = 5 #Indica que pruebe diferentes valores por default para el parámetro principal
)
print(train.mars)
ggplot(train.mars)
test.mars  <- predict(train.mars, newdata=test) #Vector de datos predichos
error.mars <- test$Sale_Price-test.mars #(dato real - dato estimado)
```
## K-Nearest Neighbors
Es un algoritmo  en el que cada observación se predice en función de su "similitud" con otras observaciones y luego usa el valor de respuesta media de k observaciones como el resultado previsto.
Para medir "similitud" usamos métricas (distancias) en el espacio $\mathcal{R}^j$. Para dos observaciones $i$ y $n$, $J$ predictores, tenemos la métricas:
$$\sqrt{\sum_{j=1}^J (X_{ij}-X_{nj})^2} \hspace{.5 cm} \text{(Métrica Eucliadiana)}$$
$$\sum_{j=1}^J |X_{ij}-X_{nj}| \hspace{.5 cm} \text{(Métrica Manhattan)}$$
$$\left(\sum_{j=1}^J |X_{ij}-X_{nj}|^{p}\right)^{1/p} \hspace{.5 cm} \text{(Métrica Minkowski)}$$
Al encontrar los k-vecinos más cercanos, ponderamos sus resultados ($Y$):
$$\hat{Y}_i=w_1Y_{1,i}+...+w_kY_{k,i}$$
Si utilizamos ponderaciones $w_k$ que no son iguales (ese caso es $w_k=1/k$), puntos cercanos deberían pesar más que puntos lejanos.
![](4.png)
```{r, message = FALSE, warning=FALSE}
### Ejecutar KNN
train.knn <- train(Sale_Price ~ Year_Built+Gr_Liv_Area+Roof_Style+Heating_QC,
data=train, method="knn",
trControl = trainControl("cv", number=10),
preProcess = c("center","scale"),
tuneLength = 5
)
print(train.knn)
ggplot(train.knn)
test.knn  <- predict(train.knn, newdata=test)
error.knn <- test$Sale_Price-test.knn
```
## CART
Modelo basado en árboles de regresión - algoritmo no paramétrico - se utiliza cuando hay múltiples regresores. Divide el espacio de las características ($X$) según particiones binarias dada alguna regla de condición. De esto van resultando regiones más pequeñas.
El objetivo en cada nodo es encontrar la "mejor" característica ($X_j$) para dividir los datos restantes en una de dos regiones ($R_1$ y $R_2$) de manera que el error general entre la respuesta real ($Y$) y la constante predicha ($c$) se minimiza. Para problemas de regresión, la función objetivo a minimizar es el $SSE$ (suma de cuadrados residuales) total.
$$SSE=\sum_{i\in R_1} (y_i-c_1)^2 + \sum_{i\in R_2} (y_i-c_2)^2 $$
![](5.png)
```{r, message = FALSE, warning=FALSE}
### Ejecutar CART (Classification and Regression Trees)
train.cart <- train(Sale_Price ~ Year_Built+Gr_Liv_Area+Roof_Style+Heating_QC,
data=train, method="rpart2",
trControl = trainControl("cv", number=10),
preProcess = c("center","scale"),
tuneLength = 5
)
print(train.cart)
ggplot(train.cart)
test.cart  <- predict(train.cart, newdata=test)
error.cart <- test$Sale_Price-test.cart
```
## Random Forest
Random Forest se construye utilizando los principios fundamentales de los árboles de regresión y el bagging. Este úlimo, genera múltiples muestras de los datos y las agrega a los múltiples árboles de regresión. Pero al construir estos árboles de decisión se debe elegir una muestra aleatoria de predictores$X$ (llamados $mtry$).Esta agregación reduce la variación del procedimiento general y da como resultado un mejor rendimiento predictivo.
```{r, message = FALSE, warning=FALSE}
### Ejecutar Random Forest
train.randomf <- train(Sale_Price ~ Year_Built+Gr_Liv_Area+Roof_Style+Heating_QC,
data=train, method="rf",
trControl = trainControl("cv", number=10),
preProcess = c("center","scale"),
tuneLength = 5
)
print(train.randomf)
ggplot(train.randomf)
test.randomf  <- predict(train.randomf, newdata=test)
error.randomf <- test$Sale_Price-test.randomf
```
## Comparación de modelos
```{r, message = FALSE, warning=FALSE}
sales.test <- data.frame(lm=test.lm, mars=unname(test.mars),  knn=test.knn,  cart=test.cart,  rf=test.randomf, sales=test$Sale_Price)
error.test <- data.frame(lm=error.lm, mars=unname(error.mars), knn=error.knn, cart=error.cart, rf=error.randomf)
summary(abs(error.test))
summary(error.test)
boxplot(abs(subset(error.test, select=-lm))); title(main="ML models", sub="Forecasting Absolute Errors")
boxplot(subset(error.test, select=-lm)); title(main="ML models", sub="Forecasting Errors")
```
library(data.table)
library(dplyr)
library(Hmisc)
library(ggplot2)
setwd("C:/Users/Felipe/Documents/GitHub/2021-1/Entel---Customer-Experience")
setwd("Data plana")
churn_fijo <- fread("5Churn/Churn Fijo.txt")
View(churn_fijo)
summary(churn_fijo)
churn_fijo <- churn_fijo %>%
select(c(encriptado, Mes, ID_ESTADO_FACTURACION_PMF,DESC_MOVIMIENTO_ACCF,
DESC_PRODUCTO_DEF, FACTURACION, TIPO_TRABAJO, FECHA_AR, FACT_CHURN_CODPRIN,
SEGMENTO, SEGMENTO_
))
ggplot(churn_fijo, aes(x=FACTURACION, color=SEGMENTO))+
geom_histogram()
ggplot(churn_fijo, aes(x=FACTURACION, fill=SEGMENTO))+
geom_histogram()
ggplot(churn_fijo, aes(x=FACTURACION, fill=SEGMENTO))+
geom_histogram()+
theme(text = element_text(size = 20))
ggplot(churn_fijo, aes(x=FACTURACION, fill=SEGMENTO))+
geom_histogram()+
theme(text = element_text(size = 16))
ggplot(churn_fijo, aes(x=FACTURACION, fill=SEGMENTO))+
geom_histogram()+
theme(text = element_text(size = 16))+
scale_color_brewer(palette="Dark2")
ggplot(churn_fijo, aes(x=FACTURACION, fill=SEGMENTO))+
geom_histogram()+
theme(text = element_text(size = 16))+
scale_color_brewer(palette="Dark2")
plot <- ggplot(churn_fijo, aes(x=FACTURACION, fill=SEGMENTO))+
geom_histogram()+
theme(text = element_text(size = 16))+
plot + scale_color_brewer(palette="Dark2")
plot <- ggplot(churn_fijo, aes(x=FACTURACION, fill=SEGMENTO))+
geom_histogram()+
theme(text = element_text(size = 16))
plot + scale_color_brewer(palette="Dark2")
plot + scale_color_brewer(palette="Dark")
plot + scale_color_brewer(palette="RdBu")
plot + scale_fill_brewer(palette="RdBu")
plot + scale_fill_brewer(palette="RdYiBu")
plot + scale_fill_brewer(palette="RdYlBu")
plot <- ggplot(churn_fijo, aes(x=FACTURACION, fill=SEGMENTO, color=SEGMENTO))+
geom_histogram()+
theme(text = element_text(size = 16))
plot + scale_fill_brewer(palette="RdYlBu")
plot <- ggplot(churn_fijo, aes(x=FACTURACION, fill=SEGMENTO, color=SEGMENTO))+
geom_histogram()+
theme(text = element_text(size = 16))+
scale_fill_brewer(palette="RdYlBu")+
scale_color_brewer(palette="RdYlBu")
plot <- ggplot(churn_fijo, aes(x=FACTURACION, fill=SEGMENTO, color=SEGMENTO))+
geom_histogram()+
theme(text = element_text(size = 16))+
scale_fill_brewer(palette="RdYlBu")+
scale_color_brewer(palette="RdYlBu")
ggplot(churn_fijo, aes(x=FACTURACION, fill=SEGMENTO, color=SEGMENTO))+
geom_histogram()+
theme(text = element_text(size = 16))+
scale_fill_brewer(palette="RdYlBu")+
scale_color_brewer(palette="RdYlBu")
png(filename="churn_fijo$FACTURACION", width=800, height=360)
ggplot(churn_fijo, aes(x=FACTURACION, fill=SEGMENTO, color=SEGMENTO))+
geom_histogram()+
theme(text = element_text(size = 16))+
scale_fill_brewer(palette="RdYlBu")+
scale_color_brewer(palette="RdYlBu")
png(filename="churn_fijo$FACTURACION", width=800, height=360)
ggplot(churn_fijo, aes(x=FACTURACION, fill=SEGMENTO, color=SEGMENTO))+
geom_histogram()+
theme(text = element_text(size = 16))+
scale_fill_brewer(palette="RdYlBu")+
scale_color_brewer(palette="RdYlBu")
ggsave("Plots/Felipe/churn_fijo$FACTURACION.png")
png(filename="churn_fijo$FACTURACION", width=800, height=360)
ggplot(churn_fijo, aes(x=FACTURACION, fill=SEGMENTO, color=SEGMENTO))+
geom_histogram()+
theme(text = element_text(size = 16))+
scale_fill_brewer(palette="RdYlBu")+
scale_color_brewer(palette="RdYlBu")
ggsave(path='Plots/Felipe/', filename="churn_fijo$FACTURACION.png")
png(filename="churn_fijo$FACTURACION", width=800, height=360)
ggplot(churn_fijo, aes(x=FACTURACION, fill=SEGMENTO, color=SEGMENTO))+
geom_histogram()+
theme(text = element_text(size = 16))+
scale_fill_brewer(palette="RdYlBu")+
scale_color_brewer(palette="RdYlBu")
ggsave(path='Plots/Felipe', filename="churn_fijo$FACTURACION.png")
ggplot(churn_fijo, aes(x=FACTURACION, fill=SEGMENTO, color=SEGMENTO))+
geom_histogram()+
theme(text = element_text(size = 16))+
scale_fill_brewer(palette="RdYlBu")+
scale_color_brewer(palette="RdYlBu")
ggsave(path='Plots/Felipe', filename="churn_fijo$FACTURACION.png")
ggplot(churn_fijo, aes(x=FACTURACION, fill=SEGMENTO, color=SEGMENTO))+
geom_histogram()+
theme(text = element_text(size = 16))+
scale_fill_brewer(palette="RdYlBu")+
scale_color_brewer(palette="RdYlBu")
ggsave(path='Plots/Felipe', filename="churn_fijo$FACTURACION.png", dpi=120)
png(filename="churn_fijo$FACTURACION", width=800, height=360)
plot <- ggplot(churn_fijo, aes(x=FACTURACION, fill=SEGMENTO, color=SEGMENTO))+
geom_histogram()+
theme(text = element_text(size = 16))+
scale_fill_brewer(palette="RdYlBu")+
scale_color_brewer(palette="RdYlBu")
ggsave(path='Plots/Felipe', filename="churn_fijo$FACTURACION.png",plot = plot, dpi=120)
ggplot(churn_fijo, aes(x=FACTURACION, fill=SEGMENTO, color=SEGMENTO))+
geom_histogram()+
theme(text = element_text(size = 16))+
scale_fill_brewer(palette="RdYlBu")+
scale_color_brewer(palette="RdYlBu")+
ggsave(path='Plots/Felipe', filename="churn_fijo$FACTURACION.png", dpi=120)
path="C:/Users/Felipe/Documents/GitHub/2021-1/Entel---Customer-Experience/Data plana/Plots/Felipe"
ggplot(churn_fijo, aes(x=FACTURACION, fill=SEGMENTO, color=SEGMENTO))+
geom_histogram()+
theme(text = element_text(size = 16))+
scale_fill_brewer(palette="RdYlBu")+
scale_color_brewer(palette="RdYlBu")+
ggsave(path=path, filename="churn_fijo$FACTURACION.png", dpi=120)
ggplot(churn_fijo, aes(x=FACTURACION, fill=SEGMENTO, color=SEGMENTO))+
geom_histogram()+
theme(text = element_text(size = 16))+
scale_fill_brewer(palette="RdYlBu")+
scale_color_brewer(palette="RdYlBu")+
ggsave(path=path, filename="churn_fijo$FACTURACION.png", dpi=120)
path="C:/Users/Felipe/Documents/GitHub/2021-1/Entel---Customer-Experience/Plots/Felipe"
ggplot(churn_fijo, aes(x=FACTURACION, fill=SEGMENTO, color=SEGMENTO))+
geom_histogram()+
theme(text = element_text(size = 16))+
scale_fill_brewer(palette="RdYlBu")+
scale_color_brewer(palette="RdYlBu")+
ggsave(path=path, filename="churn_fijo$FACTURACION.png", dpi=120)
png(width=800, height=360)
ggplot(churn_fijo, aes(x=FACTURACION, fill=SEGMENTO, color=SEGMENTO))+
geom_histogram()+
theme(text = element_text(size = 16))+
scale_fill_brewer(palette="RdYlBu")+
scale_color_brewer(palette="RdYlBu")+
ggsave(path=path, filename="churn_fijo$FACTURACION.png", dpi=120)
png(width=80, height=360)
ggplot(churn_fijo, aes(x=FACTURACION, fill=SEGMENTO, color=SEGMENTO))+
geom_histogram()+
theme(text = element_text(size = 16))+
scale_fill_brewer(palette="RdYlBu")+
scale_color_brewer(palette="RdYlBu")+
ggsave(path=path, filename="churn_fijo$FACTURACION.png", dpi=120)
png(width=800, height=360)
ggplot(churn_fijo, aes(x=FACTURACION, fill=SEGMENTO, color=SEGMENTO))+
geom_histogram()+
theme(text = element_text(size = 16))+
scale_fill_brewer(palette="RdYlBu")+
scale_color_brewer(palette="RdYlBu")+
ggsave(path=path, filename="churn_fijo$FACTURACION.png", dpi=120)
churn_fijo2 <- churn_fijo %>%
filter(FACTURACION <1000000)
png(width=800, height=360)
ggplot(churn_fijo2, aes(x=FACTURACION, fill=SEGMENTO, color=SEGMENTO))+
geom_histogram()+
theme(text = element_text(size = 16))+
scale_fill_brewer(palette="RdYlBu")+
scale_color_brewer(palette="RdYlBu")+
ggsave(path=path, filename="churn_fijo2$FACTURACION.png", dpi=120)
churn_fijo2 <- churn_fijo %>%
filter(FACTURACION <250000)
png(width=800, height=360)
ggplot(churn_fijo2, aes(x=FACTURACION, fill=SEGMENTO, color=SEGMENTO))+
geom_histogram()+
theme(text = element_text(size = 16))+
scale_fill_brewer(palette="RdYlBu")+
scale_color_brewer(palette="RdYlBu")+
ggsave(path=path, filename="churn_fijo2$FACTURACION.png", dpi=120)
churn_fijo2 <- churn_fijo %>%
filter(FACTURACION <100000)
png(width=800, height=360)
ggplot(churn_fijo2, aes(x=FACTURACION, fill=SEGMENTO, color=SEGMENTO))+
geom_histogram()+
theme(text = element_text(size = 16))+
scale_fill_brewer(palette="RdYlBu")+
scale_color_brewer(palette="RdYlBu")+
ggsave(path=path, filename="churn_fijo2$FACTURACION.png", dpi=120)
churn_fijo2 <- churn_fijo %>%
filter(FACTURACION <100000)
png(width=800, height=360)
ggplot(churn_fijo2, aes(x=FACTURACION, fill=SEGMENTO, color=SEGMENTO))+
geom_histogram()+
labs(title="Facturación por \n segmento de cliente",x ="Cantidad", y = "Facturación")
theme(text = element_text(size = 16))+
scale_fill_brewer(palette="RdYlBu")+
scale_color_brewer(palette="RdYlBu")+
ggsave(path=path, filename="churn_fijo2$FACTURACION.png", dpi=120)
churn_fijo2 <- churn_fijo %>%
filter(FACTURACION <100000)
png(width=800, height=360)
ggplot(churn_fijo2, aes(x=FACTURACION, fill=SEGMENTO, color=SEGMENTO))+
geom_histogram()+
labs(title="Facturación por \n segmento de cliente",x ="Cantidad", y = "Facturación")+
theme(text = element_text(size = 16))+
scale_fill_brewer(palette="RdYlBu")+
scale_color_brewer(palette="RdYlBu")+
ggsave(path=path, filename="churn_fijo2$FACTURACION.png", dpi=120)
png(width=800, height=360)
ggplot(churn_fijo2, aes(x=FACTURACION, fill=SEGMENTO, color=SEGMENTO))+
geom_histogram()+
labs(title="Facturación por segmento de cliente",y ="Cantidad", x = "Facturación")+
theme(text = element_text(size = 16), plot.title = element_text(hjust = 0.5))+
scale_fill_brewer(palette="RdYlBu")+
scale_color_brewer(palette="RdYlBu")+
ggsave(path=path, filename="churn_fijo2$FACTURACION.png", dpi=120)
png(width=800, height=360)
ggplot(churn_fijo, aes(x=FACTURACION, fill=SEGMENTO, color=SEGMENTO))+
geom_histogram()+
labs(title="Facturación por segmento de cliente",y ="Cantidad", x = "Facturación")+
theme(text = element_text(size = 16), plot.title = element_text(hjust = 0.5))+
scale_fill_brewer(palette="RdYlBu")+
scale_color_brewer(palette="RdYlBu")+
ggsave(path=path, filename="churn_fijo$FACTURACION.png", dpi=120)
png(width=800, height=360)
ggplot(churn_fijo, aes(x=FACTURACION, fill=SEGMENTO, color=SEGMENTO))+
geom_histogram()+
labs(title="Facturación por segmento de cliente",y ="Cantidad", x = "Facturación")+
theme(text = element_text(size = 16), plot.title = element_text(hjust = 0.5))+
scale_fill_brewer(palette="RdYlBu")+
scale_color_brewer(palette="RdYlBu")+
ggsave(path=path, filename="churn_fijo$FACTURACION.png", dpi=120)
churn_fijo2 <- churn_fijo %>%
filter(FACTURACION <=100000)
png(width=800, height=360)
ggplot(churn_fijo2, aes(x=FACTURACION, fill=SEGMENTO, color=SEGMENTO))+
geom_histogram()+
labs(title="Facturación (<=100000) por segmento de cliente",y ="Cantidad", x = "Facturación")+
theme(text = element_text(size = 16), plot.title = element_text(hjust = 0.5))+
scale_fill_brewer(palette="RdYlBu")+
scale_color_brewer(palette="RdYlBu")+
ggsave(path=path, filename="churn_fijo2$FACTURACION.png", dpi=120)
churn_fijo2 <- churn_fijo %>%
filter(FACTURACION <=100000, FACTURACION >0)
png(width=800, height=360)
ggplot(churn_fijo2, aes(x=FACTURACION, fill=SEGMENTO, color=SEGMENTO))+
geom_histogram()+
labs(title="Facturación (<=100000) por segmento de cliente",y ="Cantidad", x = "Facturación")+
theme(text = element_text(size = 16), plot.title = element_text(hjust = 0.5))+
scale_fill_brewer(palette="RdYlBu")+
scale_color_brewer(palette="RdYlBu")+
ggsave(path=path, filename="churn_fijo2$FACTURACION.png", dpi=120)
png(width=800, height=360)
ggplot(churn_fijo2, aes(x=FACTURACION, fill=SEGMENTO, color=SEGMENTO))+
geom_histogram()+
labs(title="Facturación (mayor a 0 y menor igual a 100000) por segmento de cliente",y ="Cantidad", x = "Facturación")+
theme(text = element_text(size = 16), plot.title = element_text(hjust = 0.5))+
scale_fill_brewer(palette="RdYlBu")+
scale_color_brewer(palette="RdYlBu")+
ggsave(path=path, filename="churn_fijo2$FACTURACION.png", dpi=120)
png(width=800, height=360)
ggplot(churn_fijo, aes(x=FACTURACION, fill=SEGMENTO, color=SEGMENTO))+
geom_histogram()+
labs(title="Facturación por segmento de cliente",y ="Cantidad", x = "Facturación")+
theme(text = element_text(size = 16), plot.title = element_text(hjust = 0.5))+
scale_fill_brewer(palette="RdYlBu")+
scale_color_brewer(palette="RdYlBu")+
ggsave(path=path, filename="churn_fijo$FACTURACION.png", dpi=120)
png(width=800, height=360)
ggplot(churn_fijo, aes(x=FACTURACION, fill=SEGMENTO, color=SEGMENTO))+
geom_histogram()+
labs(title="Facturación por segmento de cliente",y ="Cantidad", x = "Facturación")+
theme(text = element_text(size = 16), plot.title = element_text(hjust = 0.5))+
scale_fill_brewer(palette="RdYlBu")+
scale_color_brewer(palette="RdYlBu")+
ggsave(path=path, filename="churn_fijo$FACTURACION.png", dpi=360)
png(width=800, height=360)
ggplot(churn_fijo2, aes(x=FACTURACION, fill=SEGMENTO, color=SEGMENTO))+
geom_histogram()+
labs(title="Facturación (mayor a 0 y menor igual a 100000) por segmento de cliente",y ="Cantidad", x = "Facturación")+
theme(text = element_text(size = 16), plot.title = element_text(hjust = 0.5))+
scale_fill_brewer(palette="RdYlBu")+
scale_color_brewer(palette="RdYlBu")+
ggsave(path=path, filename="churn_fijo2$FACTURACION.png", dpi=360)
churn_movil <- fread("5Churn/Churn Movil.txt")
View(churn_movil)
churn_movil <- churn_movil %>%
select(c(encriptado, ID_DIA, SEGMENTO, `SUB SEGMENTO`, NEGOCIO,
MOVIMIENTO, `SUB MOVIMIENTO`, DESC_PLAN, TIPO_PLAN,
MES, AÑO, CANAL_REASIGNADO))
describe(churn_movil)
churn_movil <- fread("5Churn/Churn Movil.txt")
View(churn_movil)
describe(churn_movil)
f1 <- fread("7Facturacion/Fijo/Fact Fijo 2019-1.txt")
f2 <- fread("7Facturacion/Fijo/Fact Fijo 2019-2.txt")
f3 <- fread("7Facturacion/Fijo/Fact Fijo 2019-3.txt")
f4 <- fread("7Facturacion/Fijo/Fact Fijo 2020-1.txt")
f5 <- fread("7Facturacion/Fijo/Fact Fijo 2020-2.txt")
facturacion_fijo <- rbind(f1, f2, f3, f4, f5)
View(facturacion_fijo)
png(width=800, height=360)
ggplot(facturacion_fijo, aes(x=FACTURACION, fill=SEGMENTO, color=SEGMENTO))+
geom_histogram()+
labs(title="Facturación por segmento de cliente",y ="Cantidad", x = "Facturación")+
theme(text = element_text(size = 16), plot.title = element_text(hjust = 0.5))+
scale_fill_brewer(palette="RdYlBu")+
scale_color_brewer(palette="RdYlBu")+
ggsave(path=path, filename="facturacion_fijo$FACTURACION.png", dpi=360)
png(width=800, height=360)
ggplot(facturacion_fijo, aes(x=MONTO_NETO, fill=SUBSEGMENTO_BUN, color=SUBSEGMENTO_BUN))+
geom_histogram()+
labs(title="Facturación por segmento de cliente",y ="Cantidad", x = "Facturación")+
theme(text = element_text(size = 16), plot.title = element_text(hjust = 0.5))+
scale_fill_brewer(palette="RdYlBu")+
scale_color_brewer(palette="RdYlBu")+
ggsave(path=path, filename="facturacion_fijo$FACTURACION.png", dpi=360)
facturacion_fijo2 <- facturacion_fijo %>%
filter(MONTO_NETO>0, MONTO_NETO<100000)
png(width=800, height=360)
ggplot(facturacion_fijo2, aes(x=MONTO_NETO, fill=SUBSEGMENTO_BUN, color=SUBSEGMENTO_BUN))+
geom_histogram()+
labs(title="Facturación por segmento de cliente",y ="Cantidad", x = "Facturación")+
theme(text = element_text(size = 16), plot.title = element_text(hjust = 0.5))+
scale_fill_brewer(palette="RdYlBu")+
scale_color_brewer(palette="RdYlBu")+
ggsave(path=path, filename="facturacion_fijo2$FACTURACION.png", dpi=360)
facturacion_fijo2 <- facturacion_fijo %>%
filter(MONTO_NETO>0, MONTO_NETO<25000)
png(width=800, height=360)
ggplot(facturacion_fijo2, aes(x=MONTO_NETO, fill=SUBSEGMENTO_BUN, color=SUBSEGMENTO_BUN))+
geom_histogram()+
labs(title="Facturación por segmento de cliente",y ="Cantidad", x = "Facturación")+
theme(text = element_text(size = 16), plot.title = element_text(hjust = 0.5))+
scale_fill_brewer(palette="RdYlBu")+
scale_color_brewer(palette="RdYlBu")+
ggsave(path=path, filename="facturacion_fijo2$FACTURACION.png", dpi=360)
facturacion_fijo2 <- facturacion_fijo %>%
filter(MONTO_NETO>1000, MONTO_NETO<25000)
png(width=800, height=360)
ggplot(facturacion_fijo2, aes(x=MONTO_NETO, fill=SUBSEGMENTO_BUN, color=SUBSEGMENTO_BUN))+
geom_histogram()+
labs(title="Facturación por segmento de cliente",y ="Cantidad", x = "Facturación")+
theme(text = element_text(size = 16), plot.title = element_text(hjust = 0.5))+
scale_fill_brewer(palette="RdYlBu")+
scale_color_brewer(palette="RdYlBu")+
ggsave(path=path, filename="facturacion_fijo2$FACTURACION.png", dpi=360)
f1 <- fread("7Facturacion/Movil/Fact Movil 2019-1.txt")
f2 <- fread("7Facturacion/Movil/Fact Movil 2019-2.txt")
f3 <- fread("7Facturacion/Movil/Fact Movil 2020-1.txt")
f4 <- fread("7Facturacion/Movil/Fact Movil 2020-2.txt")
facturacion_movil <- rbind(f1, f2, f3, f4)
View(facturacion_fijo2)
churn_movil <- fread("5Churn/Churn Movil.txt")
View(churn_movil)
describe(churn_movil)
churn_fijo <- fread("5Churn/Churn Fijo.txt")
View(churn_fijo)
summary(churn_fijo)
anulaciones <- fread("8Anulaciones/Anulaciones.txt")
View(anulaciones)
c1 <- fread("6Cambios de Plan/Cambios de plan 1.txt")
c2 <- fread("6Cambios de Plan/Cambios de plan 2.txt")
c3 <- fread("6Cambios de Plan/Cambios de plan 3.txt")
cambios <- rbind(c1, c2, c3)
